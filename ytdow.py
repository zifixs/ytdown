import io
import random
from datetime import datetime
from textwrap import fill

from hikkatl.types import Message
from .. import loader, utils
from PIL import Image, ImageDraw, ImageFont

@loader.tds
class FakeScreenshotsMod(loader.Module):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    
    strings = {
        "name": "FakeScreenshots",
        "args_err": "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç! –ü—Ä–∏–º–µ—Ä: <code>.fakess –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?</code>",
        "generating": "üñº –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∫—Ä–∏–Ω—à–æ—Ç...",
    }

    async def fakesscmd(self, message: Message):
        """<—Ç–µ–∫—Å—Ç> [--reply=–æ—Ç–≤–µ—Ç] [--user=–∏–º—è] ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["args_err"])
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        reply_text = None
        user_name = "–ò–∑–≥–æ–π"
        if "--reply=" in args:
            args, reply_text = args.split("--reply=", 1)
            reply_text = reply_text.split("--user=")[0].strip()
        if "--user=" in args:
            args, user_name = args.split("--user=", 1)
            user_name = user_name.strip()
        
        await utils.answer(message, self.strings["generating"])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        img = await self.generate_screenshot(
            text=args.strip(),
            reply_text=reply_text,
            user_name=user_name,
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output = io.BytesIO()
        img.save(output, format="PNG")
        output.seek(0)
        await message.client.send_file(
            message.peer_id,
            file=output,
            caption="üì∏ –í–æ—Ç —Ç–≤–æ–π —Ñ–µ–π–∫–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç!",
        )

    async def generate_screenshot(
        self,
        text: str,
        user_name: str = "–ò–∑–≥–æ–π",
        reply_text: str = None,
    ) -> Image.Image:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new("RGB", (400, 300), (32, 44, 61))
        draw = ImageDraw.Draw(img)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
        try:
            font = ImageFont.truetype("arial.ttf", 14)
        except:
            font = ImageFont.load_default()
        
        # –ê–≤–∞—Ç–∞—Ä–∫–∞ (–ø—Ä–æ—Å—Ç–æ–π –∫—Ä—É–≥)
        avatar_size = 30
        draw.ellipse((20, 20, 20+avatar_size, 20+avatar_size), fill=(70, 130, 200))
        
        # –ò–º—è –∏ –≤—Ä–µ–º—è
        draw.text((60, 20), user_name, font=font, fill=(255, 255, 255))
        draw.text((200, 22), datetime.now().strftime("%H:%M"), font=font, fill=(150, 150, 150))
        
        # –û—Ç–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
        y_offset = 50
        if reply_text:
            draw.rectangle((60, y_offset, 360, y_offset + 40), fill=(70, 70, 70))
            draw.text((65, y_offset + 5), fill(reply_text, width=40), font=font)
            y_offset += 50
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        for line in fill(text, width=40).split("\n"):
            draw.text((60, y_offset), line, font=font, fill=(255, 255, 255))
            y_offset += 20
        
        return img
