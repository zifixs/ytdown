import io
import random
from datetime import datetime
from textwrap import fill

from hikkatl.types import Message
from .. import loader, utils
from PIL import Image, ImageDraw, ImageFont

# –°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (—Ü–≤–µ—Ç–∞, —à—Ä–∏—Ñ—Ç—ã)
FONT_PATH = "arial.ttf"  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
BG_COLOR = (32, 44, 61)  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (–∫–∞–∫ –≤ Telegram)
TEXT_COLOR = (255, 255, 255)  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
TIME_COLOR = (150, 150, 150)  # –¶–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
REPLY_COLOR = (70, 70, 70)  # –¶–≤–µ—Ç –ø–ª–∞—à–∫–∏ "–æ—Ç–≤–µ—Ç–∞"

@loader.tds
class FakeScreenshotsMod(loader.Module):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    
    strings = {
        "name": "FakeScreenshots",
        "args_err": "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç! –ü—Ä–∏–º–µ—Ä: <code>.fakess –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?</code>",
        "generating": "üñº –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∫—Ä–∏–Ω—à–æ—Ç...",
    }

    async def fakesscmd(self, message: Message):
        """<—Ç–µ–∫—Å—Ç> [--reply=–æ—Ç–≤–µ—Ç] [--user=–∏–º—è] ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["args_err"])
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (--reply, --user)
        reply_text = None
        user_name = "–ò–∑–≥–æ–π"
        if "--reply=" in args:
            args, reply_text = args.split("--reply=", 1)
            reply_text = reply_text.split("--user=")[0].strip()
        if "--user=" in args:
            args, user_name = args.split("--user=", 1)
            user_name = user_name.strip()
        
        await utils.answer(message, self.strings["generating"])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        img = await self.generate_screenshot(
            text=args.strip(),
            reply_text=reply_text,
            user_name=user_name,
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output = io.BytesIO()
        img.save(output, format="PNG")
        output.seek(0)
        await message.client.send_file(
            message.peer_id,
            file=output,
            caption="üì∏ –í–æ—Ç —Ç–≤–æ–π —Ñ–µ–π–∫–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç!",
        )

    async def generate_screenshot(
        self,
        text: str,
        user_name: str = "–ò–∑–≥–æ–π",
        reply_text: str = None,
    ) -> Image.Image:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º "—Ç–µ–ª–µ–≥—Ä–∞–º–º–æ–≤—Å–∫–∏–π" —Ñ–æ–Ω
        img = Image.new("RGB", (400, 300), BG_COLOR)
        draw = ImageDraw.Draw(img)
        
        # –®—Ä–∏—Ñ—Ç—ã
        font = ImageFont.truetype(FONT_PATH, 14)
        small_font = ImageFont.truetype(FONT_PATH, 11)
        bold_font = ImageFont.truetype(FONT_PATH, 14)  # –î–ª—è –∏–º–µ–Ω–∏
        
        # –ê–≤–∞—Ç–∞—Ä–∫–∞ (–∫—Ä—É–≥–ª–∞—è –º–∏–Ω–∏–∞—Ç—é—Ä–∞)
        avatar_size = 30
        avatar = Image.new("RGB", (avatar_size, avatar_size), (50, 150, 220))
        draw_avatar = ImageDraw.Draw(avatar)
        draw_avatar.ellipse((0, 0, avatar_size, avatar_size), fill=(70, 130, 200))
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
        img.paste(avatar, (20, 20))
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è
        draw.text((60, 20), user_name, font=bold_font, fill=TEXT_COLOR)
        time_str = datetime.now().strftime("%H:%M")
        draw.text((60 + bold_font.getlength(user_name) + 10, 22), 
                 time_str, font=small_font, fill=TIME_COLOR)
        
        # –ü–ª–∞—à–∫–∞ "–æ—Ç–≤–µ—Ç–∞" (–µ—Å–ª–∏ –µ—Å—Ç—å)
        y_offset = 50
        if reply_text:
            reply_width = 300
            reply_height = 40
            draw.rounded_rectangle(
                (60, y_offset, 60 + reply_width, y_offset + reply_height),
                radius=5,
                fill=REPLY_COLOR,
            )
            draw.text(
                (65, y_offset + 5),
                fill(reply_text, width=40),
                font=small_font,
                fill=TEXT_COLOR,
            )
            y_offset += reply_height + 10
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text_lines = fill(text, width=40).split("\n")
        for line in text_lines:
            draw.text((60, y_offset), line, font=font, fill=TEXT_COLOR)
            y_offset += 20
        
        return img
